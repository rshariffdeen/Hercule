/**
 * @name Flow from SensitiveNode to a request
 * @description Detect flow from a sensitive node to a request (ClientRequest)
 * @author Fabian Froh
 * @kind path-problem
 * @id js/sensitive-node-to-request
 * @security-severity 7.8
 * @package-examples ???
 * @tags security
 * request
 * sensitive node
 */

import python
import semmle.python.dataflow.new.TaintTracking
import semmle.python.ApiGraphs
import semmle.python.Concepts
import semmle.python.dataflow.new.SensitiveDataSources

// Import own module
class SensitiveNodeToRequestConfiguration extends TaintTracking::Configuration {
  SensitiveNodeToRequestConfiguration() { this = "SensitiveNodeToRequestConfiguration" }

  override predicate isSource(DataFlow::Node source) { exists(SensitiveDataSource c | source = c) }

  override predicate isSink(DataFlow::Node sink) {
    (
      sink instanceof DataFlow::CallCfgNode or
      sink instanceof DataFlow::MethodCallNode
    ) and
    sink = API::moduleImport("socket").getMember("socket").getMember("sendall").getACall()
  }

  override predicate isAdditionalTaintStep(DataFlow::Node pred, DataFlow::Node succ) {
    // Storing the information in an object property
    exists(DataFlow::AttrWrite propWrite, string property |
      propWrite.accesses(succ, property) and propWrite.getValue() = pred
    )
  }
}

from SensitiveNodeToRequestConfiguration cfg, DataFlow::PathNode source, DataFlow::PathNode sink
where cfg.hasFlowPath(source, sink)
select sink.getNode(), source, sink,
  "SensitiveNode ($@) classified as \"" + source.getNode().(SensitiveDataSource).getClassification()
    + "\" flows to a request argument ($@).", source.getNode(),
  source.getNode().asExpr().toString(), sink.getNode(),
  sink.getNode().getLocation().toString()
