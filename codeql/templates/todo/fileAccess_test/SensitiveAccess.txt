/**
 * @name Accessed file with sensitive name
 * @description Detect access (FileSystemAccess) to a file with a sensitive name (e.g. ssh)
 * @Author Fabian Froh based on work from Mat√≠as Gobbi
 * @kind path-problem
 * @edge x
 * @id js/sensitive-file-name-access
 * @problem.severity warning
 * @package-examples font-scrubber
 * @tags file access
 *       ssh
 *       sensitive file name
 *       passwd
 */

import python
import semmle.python.dataflow.new.TaintTracking
import semmle.python.ApiGraphs
import semmle.python.Concepts

class SensitiveFile extends string {
  // CharPred
  SensitiveFile() {
    this in [
        "ssh/id_rsa", "ssh/config", "ssh/known_hosts", "ssh/authorized_keys", "bash_history",
        "zsh_history", "etc/passwd", ".env", "init.py", "__init__.py", "logger.py"
      ]
  }
}

class SensitiveFileNameAccessConfiguration extends TaintTracking::Configuration {
  SensitiveFileNameAccessConfiguration() { this = "SensitiveFileNameAccessConfiguration" }

  override predicate isSource(DataFlow::Node source) {
    exists(string path, SensitiveFile file | source.asExpr().getAChildNode().(StringPart).getText() = path |
      path.matches("%" + file)
    )
  }

  override predicate isSink(DataFlow::Node sink) {
    exists(FileSystemAccess f | sink = f.getAPathArgument())
  }

  override predicate isAdditionalTaintStep(DataFlow::Node pred, DataFlow::Node succ) {
    // Storing the information in an object property
    exists(DataFlow::AttrWrite propWrite, string property |
      propWrite.accesses(succ, property) and propWrite.getValue() = pred
    )
  }
}

from SensitiveFileNameAccessConfiguration cfg, DataFlow::PathNode source, DataFlow::PathNode sink
where cfg.hasFlowPath(source, sink)
select sink.getNode(), source, sink, "Sensitive file name ($@) is used in a file access ($@).",
  source.getNode(), source.getNode().toString(), sink.getNode(), sink.toString()
