/**
 * @name divide and hide test
 * @description smth
 * @kind problem
 * @problem.severity warning
 * @security-severity 7.8
 * @precision high
 * @id py/pwuid
 * @tags security
 */

import python
import semmle.python.dataflow.new.TaintTracking
import semmle.python.ApiGraphs
import semmle.python.Concepts

// predicate mySources(DataFlow::Node source) { source.asExpr().getAChildNode() instanceof StringPart }
// module MyFlowConfiguration implements DataFlow::ConfigSig {
//   predicate isSource(DataFlow::Node source) { mySources(source) }
//   predicate isSink(DataFlow::Node sink) {
//     exists(DataFlow::CallCfgNode call |
//       (
//         call = API::builtin("open").getACall() or
//         call = API::moduleImport("os").getAMember().getACall() or
//         call = API::moduleImport("requests").getAMember().getACall() or
//         call.(DataFlow::CallCfgNode).getAMethodCall(_).getMethodName() in [
//             "write", "print", "send", "sendall"
//           ]
//       ) and
//       (
//         call.getArg(_) = sink
//         or
//         call.getArgByName(_) = sink
//       )
//     )
//   }
//   predicate isAdditionalFlowStep(DataFlow::Node nodeFrom, DataFlow::Node nodeTo) {
//     exists(DataFlow::ExprNode expr | expr = nodeTo |
//       expr.asCfgNode().getAChild() = nodeFrom.asCfgNode()
//     )
//     or
//     TaintTracking::localTaint(nodeFrom, nodeTo)
//   }
// }
//module MyFlow = DataFlow::Global<MyFlowConfiguration>;
from DataFlow::CallCfgNode call, Import q, Expr imported, DataFlow::Node qN
where
  call = API::moduleImport("requests").getMember(_).getACall() and
  q.getASubExpression() = imported and
  qN.asExpr().getASubExpression() = imported 
  // and
  // (
  //   TaintTracking::localTaint(qN, call.getArg(_)) or
  //   TaintTracking::localTaint(qN, call.getArgByName(_))
  // )
//  and
//     call.getAMethodCall(_).getMethodName() in [
//     "write", "print", "send", "sendall","post"
//   ]
select call.getLocation(), "I found a divide and hide flows ($@) ($@)", q.getLocation(), "  " , qN.getLocation() , " "
