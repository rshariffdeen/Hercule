/**
 * @name Flow from SensitiveNode to FileAccess
 * @description Detect flow from a sensitive node to file access (FileSystemAccess)
 * @author Martin Mirchev
 * @kind path-problem
 * @id py/sensitive-node-file-access
 * @problem.severity warning
 * @security-severity 8.0
 * @package-examples font-scrubber
 * @tags file access
 *       sensitive node
 */

import python
import semmle.python.dataflow.new.TaintTracking
import semmle.python.ApiGraphs
import semmle.python.Concepts
import semmle.python.dataflow.new.SensitiveDataSources

class SensitiveNodeFileAccessConfiguration extends TaintTracking::Configuration {
  SensitiveNodeFileAccessConfiguration() { this = "SensitiveNodeFileAccessConfiguration" }

  override predicate isSource(DataFlow::Node source) { source instanceof SensitiveDataSource }

  override predicate isSink(DataFlow::Node sink) {
    exists(FileSystemAccess f | sink = f.getAPathArgument())
  }

  override predicate isAdditionalTaintStep(DataFlow::Node pred, DataFlow::Node succ) {
    // Storing the information in an object property
    exists(DataFlow::AttrWrite propWrite, string property |
      propWrite.accesses(succ, property) and propWrite.getValue() = pred
    )
  }
}

from SensitiveNodeFileAccessConfiguration cfg, DataFlow::PathNode source, DataFlow::PathNode sink
where cfg.hasFlowPath(source, sink)
select sink.getNode(), source, sink,
  "SensitiveNode ($@) classified as \"" + source.getNode().(SensitiveDataSource).getClassification()
    + "\" is used to access a file ($@).", source.getNode(), source.toString(), sink.getNode(),
  sink.toString()
